name: TypeScript to Lua Build and Validation

on:
  push:
    branches:
      - master
    paths-ignore:
      - 'README.md'
  pull_request:
    branches:
      - master
    paths-ignore:
      - 'README.md'

jobs:
  build-and-validate:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v5

      - name: Set up Node.js
        uses: actions/setup-node@v5
        with:
          node-version: 22.19.0

      - name: Install pnpm
        run: npm install -g pnpm

      - name: Install dependencies
        run: pnpm install

      - name: Build project
        run: pnpm run build

      - name: Check Lua syntax
        run: |
          sudo apt-get install -y lua5.3
          lua5.3 -e "assert(loadfile('index.lua'))"

      - name: Install TIC-80 dependencies
        run: |
          sudo apt-get update
          sudo apt-get install ruby-full libglvnd-dev libglu1-mesa-dev freeglut3-dev libasound2-dev libsamplerate0-dev doxygen libcurl4-openssl-dev -y
          sudo apt-get install build-essential -y

      - name: Checkout TIC-80
        run: |
          git clone --depth 1 --no-single-branch --recursive https://github.com/nesbox/TIC-80.git
          cd TIC-80
          TAG=$(git describe --tags `git ls-remote --tags --sort="v:refname" origin | tail -n1 | sed 's/.*refs\/tags\///'`)
          git fetch --depth 1 origin tag $TAG
          git checkout $TAG
          git submodule update --init --recursive
          echo "TIC80_TAG=$TAG" >> $GITHUB_ENV

      - name: Cache TIC-80 build
        uses: actions/cache@v4
        with:
          path: TIC-80/build
          key: tic80-build-${{ env.TIC80_TAG }}
          restore-keys: |
            tic80-build-

      - name: Build TIC-80
        run: |
          cd TIC-80/build
          if [[ ! -f "bin/tic80" ]]; then
            cmake -DBUILD_PRO=On ..
            cmake --build . --parallel
          fi

      - name: Validate Lua files
        run: |
          OUTPUT=$(timeout -s KILL 10s ./TIC-80/build/bin/tic80 index.lua --cli || true)
          ERROR=$(echo "$OUTPUT" | awk -F'loading cart...' '/loading cart.../ {print $2}')
          if [[ -n "$ERROR" ]]; then
            echo "Validation failed."
            echo "Full output: $OUTPUT"
            exit 1
          else
            echo "Validation succeeded."
          fi
